extends layout

block content
    h1 GIF 채팅방
        fieldset
            legend 채팅방 목록
            table
                thead
                    tr
                        th 방 제목
                        th 종류
                        th 허용 인원
                        th 방장
                tbody
                    for room in rooms
                        tr(data-id= room._id)
                            td=room.title
                            td=room.password ? '비밀방' : '공개방'
                            td=room.max
                            td(style='color:' + room.owner)=room.owner
                            -var password = room.password ? 'true' : 'false';
                            td: button(data-password=password data-id=room._id).join-btn 입장
            .error-message=error
        a(href='/room') 채팅방 생성
            script(src='/socket.io/socket.io.js')
            script.
                var socket = io.connect('http://localhost:8001/room', {
                path: '/socket.io'
                });
                socket.on('newRoom', function (data) {
                const tr = document.createElement('tr');
                let td = document.createElement('td');
                td.textContent = data.title;
                tr.appendChild(td);
                td = document.createElement('td');
                td.textContent = data.max;
                tr.appendChild(td);
                td = document.createElement('td');
                td.style.color = data.owner;
                td.textContent= data.owner;
                tr.appendChild(td);
                td = document.createElement('td');
                const button = document.createElement('button');
                button.textContent = '입장';
                button.dataset.password = data.password? 'true' : 'false';
                button.dataset.id = data._id;
                button.addEventListener('click', addBtnEvent);
                td.appendChild(button);
                tr.appendChild(td);
                tr.dataset.id= data._id;
                document.querySelector('table tbody').appendChild(tr);
                });
                socket.on('removeRoom', function(data){
                Array.prototype.forEach.call(document.querySelectorAll('tbody tr'), function(tr)
                {
                    if(tr.dataset.id === data){
                    tr.parentNode.removeChild(tr);
                    }
                    });
                });
                function addBtnEvent(e) {
                    if(e.target.dataset.password === 'true'){
                        const password = prompt('비밀번호를 입력하세요');
                        location.href ='/room/'+ e.target.dataset.id + '?password='+password;
                    }else{
                        location.href='/room/'+e.target.dataset.id;
                    }
                }
                Array.prototype.forEach.call(document.querySelectorAll('.join-btn'), function(btn)
                {
                    btn.addEventListener('click', addBtnEvent);
                });
    .timeline
        if user
            div
                form#twit-form(action='/post' method='post' enctype='multipart/form-data')
                    .input-group
                        textarea#twit(name='content' maxlength=140)
                            .img-preview
                            img#img-preview(src='' style='display: none;' width='250' alt='미리보기')
                            input#img-url(type='hidden' name='url')
                        div
                            label#img-label(for='img') 사진 업로드
                            input#img(type='file' accept='image/*')
                            button#twit-btn.btn(type='submit') 짹짹
            .twits
                form#hashtag-form(action='/post/hashtag')
                    input(type='text' name='hashtag' placeholder='태그 검색')
                    button.btn 검색
                for twit in twits
                    .twit
                        input.twit-user-id(type='hidden' value=twit.user.id)
                        input.twit-id(type='hidden' value=twit.id)
                        .twit-author=twit.user.nick
                        -const follow = user && user.Followings.map(f => f.id).includes(twit.user.id);
                        if user && user.id !== twit.user.id && !follow
                            button.twit-follow 팔로우하기
                        .twit-content= twit.content
                        if twit.img
                            .twit-img
                            img(src=twit.img alt='섬네일')
        script.
            if (document.getElementById('img')) {
                document.getElementById('img').addEventListener('change', function (e) {
                    const formData = new FormData();
                        console.log(this, this.files);
                    formData.append('img', this.files[0]);
                    const xhr = new XMLHttpRequest();
                    xhr.onload = function () {
                        if (xhr.status === 200) {
                            const url = JSON.parse(xhr.responseText).url;
                            document.getElementById('img-url').value = url;
                            document.getElementById('img-preview').src = url;
                            document.getElementById('img-preview').style.display = 'inline';
                        } else {
                            console.error(xhr.responseText);
                        }
                    };
                    xhr.open('POST', '/post/img');
                    xhr.send(formData);
                });
            }
            [].forEach.call(document.querySelectorAll('.twit-follow'), function (tag) {
                tag.addEventListener('click', function () {
                    const isLoggedIn = document.querySelector('#my-id');
                    if (isLoggedIn) {
                        const userId = tag.parentNode.querySelector('.twit-user-id').value;
                        const myId = isLoggedIn.value;
                        if (userId !== myId) {
                            if (confirm('팔로잉하시겠습니까?')) {
                                const xhr = new XMLHttpRequest();
                                xhr.onload = function () {
                                    if (xhr.status === 200) {
                                        location.reload();
                                    } else {
                                        console.error(xhr.responseText);
                                    }
                                };
                                xhr.open('POST', `/user/${userId}/follow`);
                                xhr.send();
                            }
                        }
                    }
                });
            });